{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useState, useEffect } from 'react';\nimport Title from \"../components/ui/Title\";\nimport Colors from \"../constants/colors\";\nimport NumberContainer from \"../components/game/NumberContainer\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport Card from \"../components/ui/Card\";\nimport InstructionText from \"../components/ui/InstructionText\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction generateRandomBetween(min, max, exclude) {\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n}\n\nvar minBoundary = 1;\nvar maxBoundary = 100;\n\nfunction GameScreen(_ref) {\n  var userNumber = _ref.userNumber,\n      onGameOver = _ref.onGameOver;\n  var initialGuess = generateRandomBetween(1, 100, userNumber);\n\n  var _useState = useState(initialGuess),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentGuess = _useState2[0],\n      setCurrentGuess = _useState2[1];\n\n  useEffect(function () {\n    if (currentGuess === userNumber) {\n      onGameOver();\n    }\n  }, [currentGuess, userNumber, onGameOver]);\n\n  function nextGuessHandler(direction) {\n    if (direction === 'lower' && currentGuess < userNumber || direction === 'greater' && currentGuess > userNumber) {\n      Alert.alert(\"Don't lie! You know this is wrong!\", [{\n        text: 'Sorry!',\n        style: 'cancel'\n      }]);\n      return;\n    }\n\n    if (direction === 'lower') {\n      maxBoundary = currentGuess;\n    } else {\n      minBoundary = currentGuess + 1;\n    }\n\n    var newRndNumber = generateRandomBetween(minBoundary, maxBoundary, currentGuess);\n    setCurrentGuess(newRndNumber);\n  }\n\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(Title, {\n      children: \"Opponent's Guess\"\n    }), _jsx(NumberContainer, {\n      children: currentGuess\n    }), _jsxs(Card, {\n      children: [_jsx(InstructionText, {\n        style: styles.instructionText,\n        children: \"Higher or Lower?\"\n      }), _jsxs(View, {\n        style: styles.buttonsContainer,\n        children: [_jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: nextGuessHandler.bind(this, 'lower'),\n            children: _jsx(Ionicons, {\n              name: \"md-remove\",\n              size: 24,\n              color: \"white\"\n            })\n          })\n        }), _jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: nextGuessHandler.bind(this, 'greater'),\n            children: _jsx(Ionicons, {\n              name: \"md-add\",\n              size: 24,\n              color: \"white\"\n            })\n          })\n        })]\n      })]\n    })]\n  });\n}\n\nexport default GameScreen;\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 24\n  },\n  buttonsContainer: {\n    flexDirection: 'row'\n  },\n  buttonContainer: {\n    flex: 1\n  },\n  instructionText: {\n    marginBottom: 12\n  }\n});","map":{"version":3,"sources":["/Users/annhagan/Documents/SourceCode/ReactNavtiveProjects/game/screens/GameScreen.js"],"names":["useState","useEffect","Title","Colors","NumberContainer","PrimaryButton","Card","InstructionText","Ionicons","generateRandomBetween","min","max","exclude","rndNum","Math","floor","random","minBoundary","maxBoundary","GameScreen","userNumber","onGameOver","initialGuess","currentGuess","setCurrentGuess","nextGuessHandler","direction","Alert","alert","text","style","newRndNumber","styles","screen","instructionText","buttonsContainer","buttonContainer","bind","StyleSheet","create","flex","padding","flexDirection","marginBottom"],"mappings":"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","sourcesContent":["import { View, StyleSheet, Alert } from 'react-native';\nimport { useState, useEffect } from 'react';\nimport Title from '../components/ui/Title';\nimport Colors from '../constants/colors';\nimport NumberContainer from '../components/game/NumberContainer';\nimport PrimaryButton from '../components/ui/PrimaryButton';\nimport Card from '../components/ui/Card';\nimport InstructionText from '../components/ui/InstructionText';\nimport { Ionicons } from '@expo/vector-icons';\n\nfunction generateRandomBetween(min, max, exclude) {\n    const rndNum = Math.floor(Math.random() * (max-min)) + min;\n\n    if (rndNum === exclude) {\n        return generateRandomBetween(min, max, exclude);\n    } else {\n        return rndNum;\n    }\n}\n\nlet minBoundary = 1;\nlet maxBoundary = 100;\n\n//userNumber is accepted as props \nfunction GameScreen({userNumber, onGameOver}) {\n    const initialGuess = generateRandomBetween(1, 100, userNumber ); \n    const [currentGuess, setCurrentGuess] = useState(initialGuess);\n\n    useEffect(()=> {\n        if (currentGuess === userNumber) {\n            onGameOver();\n        }\n\n    }, [currentGuess, userNumber, onGameOver] );\n\n    function nextGuessHandler(direction) {\n        //lower or greater is direction value\n        //sets a limit that the human cannot lie and cause an infinite loop\n        if (\n            (direction === 'lower' && currentGuess < userNumber) ||\n            (direction === 'greater' && currentGuess > userNumber) \n        ) {\n            Alert.alert(\"Don't lie! You know this is wrong!\", \n            [\n                { text: 'Sorry!', style: 'cancel'},\n            ]);\n            return;\n        }\n    \n        if (direction === 'lower') {\n            maxBoundary  = currentGuess; \n        } else {\n            minBoundary = currentGuess + 1;\n        }\n        const newRndNumber = generateRandomBetween(minBoundary, maxBoundary, currentGuess);\n        setCurrentGuess(newRndNumber);\n    }\n\n    return (\n        <View style={styles.screen}>\n            <Title>Opponent's Guess</Title>\n            <NumberContainer>{currentGuess}</NumberContainer>\n            <Card>\n                <InstructionText style={styles.instructionText}>Higher or Lower?</InstructionText>\n                <View style={styles.buttonsContainer}>\n                    <View style={styles.buttonContainer}>\n                        <PrimaryButton onPress={nextGuessHandler.bind(this, 'lower')}>\n                            <Ionicons name=\"md-remove\" size={24} color='white' />\n                        </PrimaryButton>\n                    </View>\n                    <View style={styles.buttonContainer}>\n                        <PrimaryButton onPress={nextGuessHandler.bind(this, 'greater')}>\n                           <Ionicons name=\"md-add\" size={24} color='white'/>\n                        </PrimaryButton>\n                    </View>\n                </View>\n            </Card>\n        </View>\n    )\n}\n\nexport default GameScreen;\n\nconst styles = StyleSheet.create({\n    screen: {\n        flex: 1,\n        padding: 24\n    },\n    buttonsContainer: {\n        flexDirection: 'row'\n    },\n    buttonContainer: {\n        flex: 1\n    },\n    instructionText: {\n        marginBottom: 12\n    }\n  \n})"]},"metadata":{},"sourceType":"module"}