{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useState } from 'react';\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport Colors from \"../constants/colors\";\nimport Title from \"../components/ui/Title\";\nimport Card from \"../components/ui/Card\";\nimport InstructionText from \"../components/ui/InstructionText\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction StartGameScreen(_ref) {\n  var onPickNumber = _ref.onPickNumber;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      enteredNumber = _useState2[0],\n      setEnteredNumber = _useState2[1];\n\n  var numberInputHandler = function numberInputHandler(enteredText) {\n    setEnteredNumber(enteredText);\n  };\n\n  var resetInputHandler = function resetInputHandler() {\n    setEnteredNumber('');\n  };\n\n  var confirmInputHandler = function confirmInputHandler() {\n    var chosenNumber = parseInt(enteredNumber);\n\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n      Alert.alert('Invalid Number!', 'Number has to be a number between 1 and 99.', [{\n        text: 'Okay',\n        style: 'destructive',\n        onPress: resetInputHandler\n      }]);\n      return;\n    }\n\n    onPickNumber(chosenNumber);\n  };\n\n  return _jsxs(View, {\n    style: styles.rootContainer,\n    children: [_jsx(Title, {\n      children: \"Guess My Number\"\n    }), _jsxs(Card, {\n      children: [_jsx(InstructionText, {\n        children: \"Enter a Number\"\n      }), _jsx(TextInput, {\n        style: styles.numberInput,\n        maxLength: 2,\n        keyboardType: \"number-pad\",\n        autoCapitalize: \"none\",\n        autoCorrect: false,\n        onChangeText: numberInputHandler,\n        value: enteredNumber\n      }), _jsxs(View, {\n        style: styles.buttonsContainer,\n        children: [_jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: resetInputHandler,\n            children: \"Reset\"\n          })\n        }), _jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: confirmInputHandler,\n            children: \"Confirm\"\n          })\n        })]\n      })]\n    })]\n  });\n}\n\nexport default StartGameScreen;\nvar styles = StyleSheet.create({\n  rootContainer: {\n    flex: 1,\n    marginTop: 32,\n    alignItems: 'center'\n  },\n  numberInput: {\n    height: 50,\n    width: 50,\n    textAlign: 'center',\n    fontSize: 32,\n    borderBottomColor: Colors.accent500,\n    borderBottomWidth: 2,\n    color: Colors.accent500,\n    marginVertical: 8,\n    fontWeight: 'bold'\n  },\n  buttonsContainer: {\n    flexDirection: 'row'\n  },\n  buttonContainer: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/Users/annhagan/Documents/SourceCode/ReactNavtiveProjects/game/screens/StartGameScreen.js"],"names":["useState","PrimaryButton","Colors","Title","Card","InstructionText","StartGameScreen","onPickNumber","enteredNumber","setEnteredNumber","numberInputHandler","enteredText","resetInputHandler","confirmInputHandler","chosenNumber","parseInt","isNaN","Alert","alert","text","style","onPress","styles","rootContainer","numberInput","buttonsContainer","buttonContainer","StyleSheet","create","flex","marginTop","alignItems","height","width","textAlign","fontSize","borderBottomColor","accent500","borderBottomWidth","color","marginVertical","fontWeight","flexDirection"],"mappings":"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","sourcesContent":["import { TextInput, View, StyleSheet, Alert } from 'react-native';\nimport { useState } from 'react';\nimport PrimaryButton from '../components/ui/PrimaryButton';\nimport Colors from '../constants/colors';\nimport Title from '../components/ui/Title';\nimport Card from '../components/ui/Card';\nimport InstructionText from '../components/ui/InstructionText';\n\nfunction StartGameScreen({onPickNumber}) {\n    //state, bind to TextInput with value prop\n    const [enteredNumber, setEnteredNumber] = useState('');\n\n    //function to update state based on user key input\n    const numberInputHandler = (enteredText) => {\n        setEnteredNumber(enteredText)\n    }\n\n    const resetInputHandler = () => {\n        setEnteredNumber('')\n    }\n    \n    const confirmInputHandler = () => {\n        const chosenNumber = parseInt(enteredNumber);\n        if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n            Alert.alert('Invalid Number!', 'Number has to be a number between 1 and 99.',\n            [{ text: 'Okay', style: 'destructive', onPress: resetInputHandler}]\n        );\n            return;\n        }\n        onPickNumber(chosenNumber);   \n    }\n\n    return (\n        <View style={styles.rootContainer}>\n            <Title>Guess My Number</Title>\n            <Card>\n                <InstructionText>Enter a Number</InstructionText>\n                    <TextInput \n                        style={styles.numberInput} \n                        maxLength={2} \n                        keyboardType=\"number-pad\"\n                        autoCapitalize='none'\n                        autoCorrect={false} \n                        onChangeText={numberInputHandler}\n                        value={enteredNumber}\n                    />\n                <View style={styles.buttonsContainer}>\n                    <View style={styles.buttonContainer}>\n                        <PrimaryButton onPress={resetInputHandler}>Reset</PrimaryButton>\n                    </View>\n                    <View style={styles.buttonContainer}>\n                        <PrimaryButton onPress={confirmInputHandler}>Confirm</PrimaryButton>\n                    </View>\n                </View>\n            </Card>\n        </View>\n    )\n}\n\nexport default StartGameScreen;\n\nconst styles = StyleSheet.create({\n    rootContainer: {\n        flex: 1,\n        marginTop: 32,\n        alignItems: 'center'\n    },\n    numberInput: {\n        height: 50,\n        width: 50,\n        textAlign: 'center',\n        fontSize: 32,\n        borderBottomColor: Colors.accent500,\n        borderBottomWidth: 2,\n        color: Colors.accent500,\n        marginVertical: 8,\n        fontWeight: 'bold'\n    },\n    buttonsContainer: {\n        flexDirection: 'row'\n    },\n    buttonContainer: {\n        flex: 1\n    }\n  \n});\n"]},"metadata":{},"sourceType":"module"}